mydata <- reactiveValues()
# The following code runs when a file is uploaded
# We want to load data, and annotate it with out databases here
# We first load the data based on its extension (.csv, .txt, .xlsx)
# Then we load our databases and join the user data with out provided databases
# Finally we save the df as a reactive object
observeEvent(input$file, {
print("file loaded")
if(sub("^.*\\.","", input$file$datapath) == "csv"){
tryCatch(
{
df <- read.csv(input$file$datapath, sep = ",", na.strings = c("NA", "Na", "NaN", "NAN", "na", "nan"))
},
error = function(e) {
stop(safeError(e))
}
)
} else if(sub("^.*\\.","", input$file$datapath) == "txt" | sub("^.*\\.","", input$file$datapath) == "tsv") {
tryCatch(
{
df <- read.csv(input$file$datapath, sep = "\t", na.strings = c("NA", "Na", "NaN", "NAN", "na", "nan"))
},
error = function(e) {
stop(safeError(e))
}
)
} else if(sub("^.*\\.","", input$file$datapath) == "xls" |
sub("^.*\\.","", input$file$datapath) == "xlsx") {
tryCatch(
{
df <- readxl::read_excel(path = input$file$datapath, guess_max = 21474836, na = c("NA", "Na", "NaN", "NAN", "na", "nan"))
},
error = function(e) {
stop(safeError(e))
}
)
}
#provided_data <- read.csv(file='database/knocktf.csv')
#df <- left_join(df, provided_data, by = c('genenames'='genenames'))
mydata$protdf <- df
})
# The table we make can use our reactive protdf dataframe
output$contents <- renderTable({
req(mydata$protdf)
return(head(mydata$protdf))
})
}
# Create Shiny app ----
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(dplyr)
# Define UI for data upload app ----
ui <- dashboardPage(
# App title ----
dashboardHeader(title = "Uploading Files"),
# Sidebar panel for inputs ----
dashboardSidebar(
# Input: Select a file ----
fileInput("file", "Choose CSV File",
multiple = FALSE,
accept = c("text/csv",
"text/comma-separated-values,text/plain",
".csv"))
),
# Main panel for displaying outputs ----
dashboardBody(
# Output: Data file ----
tableOutput("contents")
)
)
# Define server logic to read selected file ----
server <- function(input, output) {
# Create a reactiveValues object called mydata
mydata <- reactiveValues()
# The following code runs when a file is uploaded
# We want to load data, and annotate it with out databases here
# We first load the data based on its extension (.csv, .txt, .xlsx)
# Then we load our databases and join the user data with out provided databases
# Finally we save the df as a reactive object
observeEvent(input$file, {
print("file loaded")
if(sub("^.*\\.","", input$file$datapath) == "csv"){
tryCatch(
{
df <- read.csv(input$file$datapath, sep = ",", na.strings = c("NA", "Na", "NaN", "NAN", "na", "nan"))
},
error = function(e) {
stop(safeError(e))
}
)
} else if(sub("^.*\\.","", input$file$datapath) == "txt" | sub("^.*\\.","", input$file$datapath) == "tsv") {
tryCatch(
{
df <- read.csv(input$file$datapath, sep = "\t", na.strings = c("NA", "Na", "NaN", "NAN", "na", "nan"))
},
error = function(e) {
stop(safeError(e))
}
)
} else if(sub("^.*\\.","", input$file$datapath) == "xls" |
sub("^.*\\.","", input$file$datapath) == "xlsx") {
tryCatch(
{
df <- readxl::read_excel(path = input$file$datapath, guess_max = 21474836, na = c("NA", "Na", "NaN", "NAN", "na", "nan"))
},
error = function(e) {
stop(safeError(e))
}
)
}
#provided_data <- read.csv(file='database/knocktf.csv')
#df <- left_join(df, provided_data, by = c('genenames'='genenames'))
mydata$protdf <- df
})
# The table we make can use our reactive protdf dataframe
output$contents <- renderTable({
req(mydata$protdf)
return(head(mydata$protdf))
})
}
# Create Shiny app ----
shinyApp(ui, server)
source('~/.active-rstudio-document')
library(shiny)
library(shinydashboard)
library(dplyr)
# Define UI for data upload app ----
ui <- dashboardPage(
# App title ----
dashboardHeader(title = "Uploading Files"),
# Sidebar panel for inputs ----
dashboardSidebar(
# Input: Select a file ----
fileInput("file", "Choose CSV File",
multiple = FALSE,
accept = c("text/csv",
"text/comma-separated-values,text/plain",
".csv"))
),
# Main panel for displaying outputs ----
dashboardBody(
# Output: Data file ----
tableOutput("contents")
)
)
# Define server logic to read selected file ----
server <- function(input, output) {
# Create a reactiveValues object called mydata
mydata <- reactiveValues()
# The following code runs when a file is uploaded
# We want to load data, and annotate it with out databases here
# We first load the data based on its extension (.csv, .txt, .xlsx)
# Then we load our databases and join the user data with out provided databases
# Finally we save the df as a reactive object
observeEvent(input$file, {
print("file loaded")
if(sub("^.*\\.","", input$file$datapath) == "csv"){
tryCatch(
{
df <- read.csv(input$file$datapath, sep = ",", na.strings = c("NA", "Na", "NaN", "NAN", "na", "nan"))
},
error = function(e) {
stop(safeError(e))
}
)
} else if(sub("^.*\\.","", input$file$datapath) == "txt" | sub("^.*\\.","", input$file$datapath) == "tsv") {
tryCatch(
{
df <- read.csv(input$file$datapath, sep = "\t", na.strings = c("NA", "Na", "NaN", "NAN", "na", "nan"))
},
error = function(e) {
stop(safeError(e))
}
)
} else if(sub("^.*\\.","", input$file$datapath) == "xls" |
sub("^.*\\.","", input$file$datapath) == "xlsx") {
tryCatch(
{
df <- readxl::read_excel(path = input$file$datapath, guess_max = 21474836, na = c("NA", "Na", "NaN", "NAN", "na", "nan"))
},
error = function(e) {
stop(safeError(e))
}
)
}
#provided_data <- read.csv(file='database/knocktf.csv')
#df <- left_join(df, provided_data, by = c('genenames'='genenames'))
mydata$protdf <- df
})
# The table we make can use our reactive protdf dataframe
output$contents <- renderTable({
req(mydata$protdf)
return(head(mydata$protdf))
})
}
# Create Shiny app ----
shinyApp(ui, server)
View(ptable)
library(shiny)
library(shinydashboard)
library(dplyr)
# Define UI for data upload app ----
ui <- dashboardPage(
# App title ----
dashboardHeader(title = "Uploading Files"),
# Sidebar panel for inputs ----
dashboardSidebar(
# Input: Select a file ----
fileInput("file", "Choose CSV File",
multiple = FALSE,
accept = c("text/csv",
"text/comma-separated-values,text/plain",
".csv"))
),
# Main panel for displaying outputs ----
dashboardBody(
# Output: Data file ----
tableOutput("contents")
)
)
# Define server logic to read selected file ----
server <- function(input, output) {
# Create a reactiveValues object called mydata
mydata <- reactiveValues()
# The following code runs when a file is uploaded
# We want to load data, and annotate it with out databases here
# We first load the data based on its extension (.csv, .txt, .xlsx)
# Then we load our databases and join the user data with out provided databases
# Finally we save the df as a reactive object
observeEvent(input$file, {
print("file loaded")
if(sub("^.*\\.","", input$file$datapath) == "csv"){
tryCatch(
{
df <- read.csv(input$file$datapath, sep = ",", na.strings = c("NA", "Na", "NaN", "NAN", "na", "nan"))
},
error = function(e) {
stop(safeError(e))
}
)
} else if(sub("^.*\\.","", input$file$datapath) == "txt" | sub("^.*\\.","", input$file$datapath) == "tsv") {
tryCatch(
{
df <- read.csv(input$file$datapath, sep = "\t", na.strings = c("NA", "Na", "NaN", "NAN", "na", "nan"))
},
error = function(e) {
stop(safeError(e))
}
)
} else if(sub("^.*\\.","", input$file$datapath) == "xls" |
sub("^.*\\.","", input$file$datapath) == "xlsx") {
tryCatch(
{
df <- readxl::read_excel(path = input$file$datapath, guess_max = 21474836, na = c("NA", "Na", "NaN", "NAN", "na", "nan"))
},
error = function(e) {
stop(safeError(e))
}
)
}
#provided_data <- read.csv(file='database/knocktf.csv')
#df <- left_join(df, provided_data, by = c('genenames'='genenames'))
mydata$protdf <- df
})
# The table we make can use our reactive protdf dataframe
output$contents <- renderTable({
req(mydata$protdf)
return(head(mydata$protdf))
})
}
# Create Shiny app ----
shinyApp(ui, server)
View(pdata)
library(shiny)
library(shinydashboard)
library(dplyr)
# Define UI for data upload app ----
ui <- dashboardPage(
# App title ----
dashboardHeader(title = "Uploading Files"),
# Sidebar panel for inputs ----
dashboardSidebar(
# Input: Select a file ----
fileInput("file", "Choose CSV File",
multiple = FALSE,
accept = c("text/csv",
"text/comma-separated-values,text/plain",
".csv"))
),
# Main panel for displaying outputs ----
dashboardBody(
# Output: Data file ----
tableOutput("contents")
)
)
# Define server logic to read selected file ----
server <- function(input, output) {
# Create a reactiveValues object called mydata
mydata <- reactiveValues()
# The following code runs when a file is uploaded
# We want to load data, and annotate it with out databases here
# We first load the data based on its extension (.csv, .txt, .xlsx)
# Then we load our databases and join the user data with out provided databases
# Finally we save the df as a reactive object
observeEvent(input$file, {
print("file loaded")
if(sub("^.*\\.","", input$file$datapath) == "csv"){
tryCatch(
{
df <- read.csv(input$file$datapath, sep = ",", na.strings = c("NA", "Na", "NaN", "NAN", "na", "nan"))
},
error = function(e) {
stop(safeError(e))
}
)
} else if(sub("^.*\\.","", input$file$datapath) == "txt" | sub("^.*\\.","", input$file$datapath) == "tsv") {
tryCatch(
{
df <- read.csv(input$file$datapath, sep = "\t", na.strings = c("NA", "Na", "NaN", "NAN", "na", "nan"))
},
error = function(e) {
stop(safeError(e))
}
)
} else if(sub("^.*\\.","", input$file$datapath) == "xls" |
sub("^.*\\.","", input$file$datapath) == "xlsx") {
tryCatch(
{
df <- readxl::read_excel(path = input$file$datapath, guess_max = 21474836, na = c("NA", "Na", "NaN", "NAN", "na", "nan"))
},
error = function(e) {
stop(safeError(e))
}
)
}
#provided_data <- read.csv(file='database/knocktf.csv')
#df <- left_join(df, provided_data, by = c('genenames'='genenames'))
mydata$protdf <- df
})
# The table we make can use our reactive protdf dataframe
output$contents <- renderTable({
req(mydata$protdf)
return(head(mydata$protdf))
})
}
# Create Shiny app ----
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(dplyr)
# Define UI for data upload app ----
ui <- dashboardPage(
# App title ----
dashboardHeader(title = "Uploading Files"),
# Sidebar panel for inputs ----
dashboardSidebar(
# Input: Select a file ----
fileInput("file", "Choose CSV File",
multiple = FALSE,
accept = c("text/csv",
"text/comma-separated-values,text/plain",
".csv"))
),
# Main panel for displaying outputs ----
dashboardBody(
# Output: Data file ----
tableOutput("contents")
)
)
# Define server logic to read selected file ----
server <- function(input, output) {
# Create a reactiveValues object called mydata
mydata <- reactiveValues()
# The following code runs when a file is uploaded
# We want to load data, and annotate it with out databases here
# We first load the data based on its extension (.csv, .txt, .xlsx)
# Then we load our databases and join the user data with out provided databases
# Finally we save the df as a reactive object
observeEvent(input$file, {
print("file loaded")
if(sub("^.*\\.","", input$file$datapath) == "csv"){
tryCatch(
{
df <- read.csv(input$file$datapath, sep = ",", na.strings = c("NA", "Na", "NaN", "NAN", "na", "nan"))
},
error = function(e) {
stop(safeError(e))
}
)
} else if(sub("^.*\\.","", input$file$datapath) == "txt" | sub("^.*\\.","", input$file$datapath) == "tsv") {
tryCatch(
{
df <- read.csv(input$file$datapath, sep = "\t", na.strings = c("NA", "Na", "NaN", "NAN", "na", "nan"))
},
error = function(e) {
stop(safeError(e))
}
)
} else if(sub("^.*\\.","", input$file$datapath) == "xls" |
sub("^.*\\.","", input$file$datapath) == "xlsx") {
tryCatch(
{
df <- readxl::read_excel(path = input$file$datapath, guess_max = 21474836, na = c("NA", "Na", "NaN", "NAN", "na", "nan"))
},
error = function(e) {
stop(safeError(e))
}
)
}
#provided_data <- read.csv(file='database/knocktf.csv')
#df <- left_join(df, provided_data, by = c('genenames'='genenames'))
mydata$protdf <- df
})
# The table we make can use our reactive protdf dataframe
output$contents <- renderTable({
req(mydata$protdf)
return(head(mydata$protdf))
})
}
# Create Shiny app ----
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
data(examplePathways)
data(exampleRanks)
set.seed(42)
fgseaRes <- fgsea(pathways = examplePathways,
stats    = exampleRanks,
minSize  = 15,
maxSize  = 500)
library(fgsea)
library(data.table)
library(ggplot2)
data(examplePathways)
data(exampleRanks)
set.seed(42)
fgseaRes <- fgsea(pathways = examplePathways,
stats    = exampleRanks,
minSize  = 15,
maxSize  = 500)
print(examplePathways)
print(exampleRanks)
shiny::runApp('Desktop/Git/gogo/Protein_annotation_app')
runApp('Desktop/Git/gogo/Protein_annotation_app')
runApp('Desktop/Git/gogo/Protein_annotation_app')
runApp('Desktop/Git/gogo/Protein_annotation_app')
View(x1)
rm(list = ls())
runApp('Desktop/Git/gogo/Protein_annotation_app')
?head
runApp('Desktop/Git/gogo/Protein_annotation_app')
mtcars
mtcars[ , 1]
mtcars[1, ]
mtcars[1:5, ]
mtcars[1:5, 1:2]
runApp('Desktop/Git/gogo/Protein_annotation_app')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
View(x1)
x6 <- x1 %>% arrange(for_change)
View(x6)
x6 <- x1 %>% arrange(-for_change)
View(x6)
x6$rank <- 1:nrow(x6)
ggplot(x6, aes(x = rank, y = for_change)) + geom_point()
ggplot(x6, aes(x = rank, y = for_change)) + geom_bar()
ggplot(x6, aes(x = rank, y = for_change)) + geom_col()
ggplot(x6, aes(x = rank, y = for_change)) + geom_col() + theme_minimal()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
